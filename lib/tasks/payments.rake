# frozen_string_literal: true

OUTSIDE_CONTRACT = [
  %w[0382170C 2472000831],
  %w[0690652J 2472340732],
  %w[0690652J 2472340733],
  %w[0690652J 2412010122],
  %w[0690652J 2412344721],
  %w[0690652J 2412344722],
  %w[0690652J 2412521921],
  %w[0690652J 2412521922],
  %w[0690652J 2412543422],
  %w[0691875N 2473360333],
  %w[0691875N 2473360531],
  %w[0691875N 2473360632],
  %w[0691875N 2413361521],
  %w[0691875N 2413361522],
  %w[0442083A 2473121131],
  %w[0442083A 2473121332],
  %w[0442083A 2473121333],
  %w[0442227G 2403320511],
  %w[0910838S 2473000433],
  %w[0910838S 2473121432]
].freeze


BAD_RIB_IDS = %wfreeze

PRIVATE_HEALTH_ESTABLISHMENTS = %w[0541769E 0010212A 0930075B].freeze

def outside_contract?(pfmp)
  OUTSIDE_CONTRACT.any? { |uai, mef| pfmp.establishment.uai == uai && pfmp.mef.code == mef }
end

def needs_abrogated_da?(pfmp)
  pfmp.student.pfmps.joins(:mef).select(:"mefs.id").distinct.count > 1 &&
    pfmp.student.schoolings.joins(:classe).select(:"establishment_id").distinct.count > 1
end

def check_10_000_payment_requests(size: 10_000)
  ASP::PaymentRequest
    .in_state(:pending)
    .joins(pfmp: :establishment)
    .merge(Pfmp.in_state(:validated))
    .merge(Pfmp.perfect)
    .where("pfmps.end_date <= ?", Date.today)
    .where.not("ribs.id": BAD_RIB_IDS)
    .where("students.ine_not_found": false)
    .where("schoolings.attributive_decision_version < 10") # one_character_attributive_decision_version?
    .where.not("ribs.name LIKE '%¨%' OR ribs.name LIKE '%;%'") # remove after fix
    .where.not("establishments.department_code": nil) # remove after adding a fallback on postal code
    .order("pfmps.end_date")
    .limit(size)
    .each_with_index do |request, index|
    puts "dealing with #{request.id} [#{index}/#{size}k]..."
    pfmp = request.pfmp

    if pfmp.valid? &&
        !outside_contract?(pfmp) &&
        !needs_abrogated_da?(pfmp)
      begin
        request.mark_ready!
      rescue Statesman::GuardFailedError
        request.mark_incomplete!
      end
    else
      request.mark_incomplete!
    end
  end
end

# The command which doesn't print the whole universe on your console
check_10_000_payment_requests; p "done"

##############################################
## Pour envoyer 7k PFMPS ready en paiement ###

ASP::PaymentRequest.joins(ASP::PaymentRequest.most_recent_transition_join).group(:to_state).count

# Check si y'a moins de 100k en cours cette semaine
ASP::PaymentRequest.in_state(%i[sent integrated rejected]).where("most_recent_asp_payment_request_transition.created_at >= ?", Date.today.beginning_of_week).count

# Select 7k and send them
prs = ASP::PaymentRequest.in_state(:ready).joins(:pfmp).order(:end_date).limit 7000
SendPaymentRequestsJob.perform_later(prs.to_a); p "Job started !"



#####################################################################
## Pour récupérer les status du serveur ASP (1x par jour le matin) ##

PollPaymentsServerJob.perform_later


### Stats de paiement ###

end_date_group_string = "concat(date_part('year',pfmps.end_date), '-', lpad(date_part('month',pfmps.end_date)::text, 2, '0'))"
nb_treated = ASP::PaymentRequest.not_in_state(:pending).count; p "nb_treated : #{nb_treated}"

grouped_data = ASP::PaymentRequest.joins(:pfmp)
  .joins(ASP::PaymentRequest.most_recent_transition_join)
  .merge(Pfmp.this_year)
  .where("pfmps.end_date < ?", Date.parse("2024-01-01"))
  .group(end_date_group_string)
  .group(:"most_recent_asp_payment_request_transition.to_state")
  .count

data = grouped_data.reduce({}) do |h, (keys, count)|
  month, state = keys
  state = "pending" if state.nil?

  h[month] = {} if h[month].blank?
  h[month][state] = count
  h
end

def row(data_row)
  ["pending", "paid"]
end

puts [
  ["Status", *data.keys],
  *ASP::PaymentRequestStateMachine.states.map { |state| [state, data.values.map{|h| h[state]}] }
].map{|r| r.join(";")}